name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'projects/ecommerce-microservices/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'projects/ecommerce-microservices/**'
      - '.github/workflows/ci.yml'

env:
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.5'
  WORKING_DIRECTORY: projects/ecommerce-microservices

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: chmod +x gradlew

    - name: Build with Gradle
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: ./gradlew clean build -x test

    - name: Run tests
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: ./gradlew test
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres
        SPRING_REDIS_HOST: localhost
        SPRING_REDIS_PORT: 6379

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          ${{ env.WORKING_DIRECTORY }}/**/build/test-results/test/
          ${{ env.WORKING_DIRECTORY }}/**/build/reports/tests/test/
        retention-days: 7

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    strategy:
      matrix:
        service: [api-gateway, order-service, inventory-service, service-discovery]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: chmod +x gradlew

    - name: Build service
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: ./gradlew :${{ matrix.service }}:build -x test

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/ecommerce-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.WORKING_DIRECTORY }}/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          JAR_FILE=build/libs/${{ matrix.service }}-1.0.0-boot.jar