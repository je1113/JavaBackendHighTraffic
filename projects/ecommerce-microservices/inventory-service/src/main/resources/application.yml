server:
  port: 8082

spring:
  application:
    name: inventory-service
  
  datasource:
    url: jdbc:postgresql://localhost:5432/inventory_db
    username: inventory_user
    password: inventory_pass
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: false
  
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
  
  redis:
    host: localhost
    port: 6379
    timeout: 2000ms
    password: 
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms
      shutdown-timeout: 100ms
  
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 5
        compression.type: snappy
    consumer:
      group-id: inventory-service-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      properties:
        spring.json.trusted.packages: "*"
        max.poll.records: 100
        fetch.min.bytes: 1024

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

redisson:
  address: redis://localhost:6379
  password: 
  connection-pool-size: 10
  connection-minimum-idle-size: 5
  timeout: 3000
  retry-attempts: 3
  retry-interval: 1500
  database: 0
  threads: 16
  netty-threads: 32
  lock-watchdog-timeout: PT30S

distributed:
  lock:
    key-prefix: "lock:inventory:"
    default-wait-time: PT3S
    default-lease-time: PT10S
    enable-metrics: true
    metrics-report-interval: PT1M

cache:
  redis:
    default-ttl: PT30M
    key-prefix: "inventory:"
    enable-statistics: true
    
logging:
  level:
    com.hightraffic.ecommerce.inventory: DEBUG
    org.springframework.data.redis: DEBUG
    org.redisson: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  metrics:
    export:
      prometheus:
        enabled: true

# 애플리케이션별 설정
app:
  kafka:
    topics:
      stock-reserved: "inventory.stock.reserved"
      stock-released: "inventory.stock.released"
      stock-deducted: "inventory.stock.deducted"
      stock-adjusted: "inventory.stock.adjusted"
      low-stock-alert: "inventory.alerts.low-stock"
      insufficient-stock: "inventory.alerts.insufficient-stock"
      stock-added: "inventory.stock.added"
      dead-letter-queue: "inventory.dlq"
    publish:
      retry:
        max-attempts: 3
        delay-ms: 1000
        exponential-backoff: true
        max-delay-ms: 10000
      timeout-ms: 10000
      async-timeout-ms: 5000
      batch:
        enabled: true
        max-size: 100
        timeout-ms: 1000
    health:
      enabled: true
      timeout-ms: 5000
    dlq:
      enabled: true
      max-retry-attempts: 5
      retry-delay-ms: 30000
  
  inventory:
    cache:
      product-ttl: PT10M
      stock-ttl: PT5M
      reservation-ttl: PT30M
    metrics:
      enabled: true
      report-interval: PT30S
    alerts:
      low-stock:
        enabled: true
        check-interval: PT5M
        threshold-percentage: 10
      insufficient-stock:
        enabled: true
        retry-notify-interval: PT1H