plugins {
    id 'com.palantir.docker' version '0.35.0'
    id 'org.springframework.boot'
}

description = 'Order Service - Hexagonal Architecture Main Application'

dependencies {
    // Hexagonal Architecture Modules
    implementation project(':order-service:domain')
    implementation project(':order-service:application')
    implementation project(':order-service:adapter-in-web')
    implementation project(':order-service:adapter-in-messaging')
    implementation project(':order-service:adapter-out-persistence')
    implementation project(':order-service:adapter-out-messaging')
    
    // Service Discovery  
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    
    // Monitoring
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    
    // Configuration
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Testing - Integration tests only
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
}

// JPA Static Metamodel Generation
compileJava {
    options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/sources/annotationProcessor/java/main")
}

// Docker 설정
docker {
    name "${project.name}:${project.version}"
    dockerfile file('Dockerfile')
    files bootJar.archiveFile
    buildArgs(['JAR_FILE': "${bootJar.archiveFileName}"])
}

// JMH Performance Testing
configurations {
    jmh
}

// Performance testing task
task jmh(type: JavaExec) {
    dependsOn classes
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.test.runtimeClasspath
    args = ['.*Benchmark.*']
}