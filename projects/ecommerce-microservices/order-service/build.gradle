plugins {
    id 'com.palantir.docker' version '0.35.0'
    id 'org.springframework.boot'
}

description = 'Order Domain Service with DDD Architecture'

dependencies {
    // Common module
    implementation project(':common')
    
    // Spring Boot Web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    
    // Spring Data JPA & Database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation libs.postgresql
    
    // Service Discovery Client  
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    
    // Kafka for Event Messaging
    implementation 'org.springframework.kafka:spring-kafka'
    
    // Redis for Caching
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation libs.redisson.spring.boot.starter
    
    // OpenAPI Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    
    // MapStruct for DTO Mapping
    implementation libs.mapstruct
    annotationProcessor libs.mapstruct.processor
    
    // Configuration Processor
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Testing
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.testcontainers:redis'
    
    // Test MapStruct
    testAnnotationProcessor libs.mapstruct.processor
}

// JPA Static Metamodel Generation
compileJava {
    options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/sources/annotationProcessor/java/main")
}

// Docker 설정
docker {
    name "${project.name}:${project.version}"
    dockerfile file('Dockerfile')
    files bootJar.archiveFile
    buildArgs(['JAR_FILE': "${bootJar.archiveFileName}"])
}

// JMH Performance Testing
configurations {
    jmh
}

// Performance testing task
task jmh(type: JavaExec) {
    dependsOn classes
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.test.runtimeClasspath
    args = ['.*Benchmark.*']
}