plugins {
    id 'com.bmuschko.docker-spring-boot-application' version '9.4.0'
    id 'org.springframework.boot'
    id 'java'
}

description = 'Order Service with DDD Architecture'

dependencies {
    // Project Dependencies
    implementation project(':common')
    
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
    // Spring Cloud
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    
    // Database
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    
    // Messaging
    implementation 'org.springframework.kafka:spring-kafka'
    
    // Redis for Distributed Lock
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation "org.redisson:redisson-spring-boot-starter:${redissonVersion}"
    
    // OpenAPI Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    
    // MapStruct for Mapping
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    
    // Configuration
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.testcontainers:junit-jupiter'
}

// JPA Static Metamodel Generation
compileJava {
    options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/sources/annotationProcessor/java/main")
}

// Docker 설정
docker {
    springBootApplication {
        baseImage = 'openjdk:17-jre-slim'
        maintainer = 'High Traffic E-commerce Team'
        ports = [8080]
        images = ["${project.name}:${project.version}", "${project.name}:latest"]
    }
}

// JMH Performance Testing
configurations {
    jmh
}

// Performance testing task
task jmh(type: JavaExec) {
    dependsOn classes
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.test.runtimeClasspath
    args = ['.*Benchmark.*']
}