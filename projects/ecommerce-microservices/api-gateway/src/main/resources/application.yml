server:
  port: 8080
  error:
    include-message: always
    include-binding-errors: always

spring:
  application:
    name: api-gateway
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}
  
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: 
              - "http://localhost:3000"
              - "http://localhost:8080"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders:
              - "*"
            allowCredentials: true
            maxAge: 3600
      
      routes:
        # Inventory Service Routes
        - id: inventory-service
          uri: lb://INVENTORY-SERVICE
          predicates:
            - Path=/api/v1/inventory/**
          filters:
            - name: CircuitBreaker
              args:
                name: inventory-service
                fallbackUri: forward:/fallback/inventory
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY,SERVICE_UNAVAILABLE
                methods: GET,POST
                backoff:
                  firstBackoff: 50ms
                  maxBackoff: 500ms
                  factor: 2
                  basedOnPreviousValue: false
        
        # Order Service Routes
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/v1/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: order-service
                fallbackUri: forward:/fallback/order
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY,SERVICE_UNAVAILABLE
                methods: GET,POST
                backoff:
                  firstBackoff: 50ms
                  maxBackoff: 500ms
                  factor: 2
                  basedOnPreviousValue: false
        
        # Health Check Routes
        - id: inventory-health
          uri: lb://INVENTORY-SERVICE
          predicates:
            - Path=/api/inventory/actuator/**
          filters:
            - RewritePath=/api/inventory/actuator/(?<path>.*), /actuator/$\{path}
        
        - id: order-health
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/orders/actuator/**
          filters:
            - RewritePath=/api/orders/actuator/(?<path>.*), /actuator/$\{path}
  
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:yourpassword}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
  
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080/auth}
          jwk-set-uri: ${JWT_JWK_SET_URI:http://localhost:8080/auth/.well-known/jwks.json}

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka/}
    register-with-eureka: true
    fetch-registry: true
    registry-fetch-interval-seconds: 5
  instance:
    hostname: ${HOSTNAME:localhost}
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10
    metadata-map:
      zone: ${ZONE:default}
      version: ${VERSION:1.0.0}

# Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      inventory-service:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        event-consumer-buffer-size: 10
      order-service:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        event-consumer-buffer-size: 10
  
  timelimiter:
    instances:
      inventory-service:
        timeout-duration: 3s
      order-service:
        timeout-duration: 3s

# Management & Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,gateway
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      group:
        readiness:
          include: readinessState,redis,eureka
        liveness:
          include: livenessState
  metrics:
    tags:
      application: ${spring.application.name}
      environment: ${spring.profiles.active}
    export:
      prometheus:
        enabled: true
  health:
    redis:
      enabled: true
    circuitbreakers:
      enabled: true

# Logging
logging:
  level:
    root: INFO
    org.springframework.cloud.gateway: DEBUG
    org.springframework.security: DEBUG
    com.hightraffic.ecommerce.gateway: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/api-gateway.log

# Rate Limiting Configuration (per second)
rate-limiting:
  enabled: true
  repository: REDIS
  default-replenish-rate: 100
  default-burst-capacity: 200
  default-requested-tokens: 1
  routes:
    inventory-service:
      replenish-rate: 1000
      burst-capacity: 2000
    order-service:
      replenish-rate: 500
      burst-capacity: 1000

# API Key Configuration
api-keys:
  enabled: true
  header-name: X-API-Key
  keys:
    - key: test-api-key-1
      name: Test Client 1
      rate-limit: 100
    - key: test-api-key-2
      name: Test Client 2
      rate-limit: 200